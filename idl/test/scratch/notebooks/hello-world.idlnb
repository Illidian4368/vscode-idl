{
  "version": "2.0.0",
  "cells": [
    {
      "type": "code",
      "content": [
        ";+",
        "; :Description:",
        ";   Cells with routine definitions are compiled, but",
        ";   not executed",
        ";",
        ";-",
        "pro test",
        "  compile_opt idl2",
        "",
        "  print, 42",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "print, routine_filepath()"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+",
        "; Main level programs are executed if they exist and, if a routine definition",
        "; has a main level program at the end, then we will run that",
        ";-",
        "",
        "compile_opt idl2",
        "",
        "print, 5",
        "",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+",
        "; :Description:",
        ";   Example cell with a main level program and function definition",
        ";",
        "; :Returns: any",
        ";",
        ";-",
        "function foo",
        "  compile_opt idl2",
        "  return, 42",
        "end",
        "",
        "print, foo()",
        "",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+",
        "; Cells don't need to have `compile_opt idl2` or an `end`",
        "; statement if they are code blocks without routine definitions",
        ";",
        "; We automatically set `compile_opt idl2` and add an `end` if it",
        "; is missing",
        ";-",
        "",
        "arr = findgen(42)",
        "help, arr"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+",
        "; All function graphics outputs are captured and rendered in the notebook",
        ";-",
        "",
        "; make some plots!",
        "p1 = plot(/test)",
        "p2 = surface(/test)",
        "p3 = bubbleplot(/test)",
        "p4 = barplot(/test)"
      ],
      "metadata": {},
      "outputs": []
    }
  ]
}